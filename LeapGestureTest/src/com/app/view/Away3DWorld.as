// com.adam.utils.Away3DWorld// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.Utils;	import com.app.controller.LeapController;	import com.leapmotion.leap.Gesture;	import com.leapmotion.leap.util.LeapMath;		import flash.display.Bitmap;	import flash.display.Sprite;	import flash.geom.Vector3D;		import away3d.containers.View3D;	import away3d.core.base.SubMesh;	import away3d.debug.Trident;	import away3d.entities.Mesh;	import away3d.events.AssetEvent;	import away3d.lights.DirectionalLight;	import away3d.loaders.Loader3D;	import away3d.loaders.misc.AssetLoaderContext;	import away3d.loaders.parsers.Parsers;	import away3d.materials.ColorMaterial;	import away3d.materials.TextureMaterial;	import away3d.materials.lightpickers.StaticLightPicker;	import away3d.materials.methods.FilteredShadowMapMethod;	import away3d.primitives.PlaneGeometry;	import away3d.primitives.SphereGeometry;	import away3d.utils.Cast;
		public class Away3DWorld extends Sprite{				protected var img:Class;				//vars		protected var _pitch:Number;		protected var _roll:Number;		protected var _yaw:Number;				protected var _floorImg:Bitmap;				//objects		private var utils:Utils=Utils.instance;		protected var _lc:LeapController;		protected var _view3D:View3D;		protected var _floor:Mesh;		protected var _floorMaterial:ColorMaterial;		protected var _floorTexture:TextureMaterial;		protected var _sphere:Mesh;		protected var _trident:Mesh;				private var _staticLightPicker:StaticLightPicker;		private var _directionalLight:DirectionalLight;				[Embed(source="../../../../assets/odyssey/odyssey.awd",mimeType="application/octet-stream")]		protected var TestModel:Class;				protected var _modelMaterial:ColorMaterial;		protected var _loader:Loader3D;		protected var _modelMesh:Mesh;				//const		public const NAME:String="away3DWorld";		public const RETURNTYPE:String=NAME;				/** Storage for the singleton instance. */		private static const _instance:Away3DWorld = new Away3DWorld(Away3DWorldLock);				public function Away3DWorld(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != Away3DWorldLock)			{				throw new Error("Invalid Away3DWorld access.  Use Away3DWorld.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();			initScene();		}				private function initVars():void{											}				private function initEvents():void{			utils.em.listen(NAME, onAway3DWorld);		}				private function initObjs():void{			_lc=LeapController.instance;			Parsers.enableAllBundled();		}				private function initScene():void{			_view3D=new View3D();			addChild(_view3D);						_view3D.camera.z=-1000;			_view3D.camera.y=500;			_view3D.camera.lookAt(new Vector3D);						//_sphere=new Mesh(new SphereGeometry(100));			//_view3D.scene.addChild(_sphere);						_directionalLight = new DirectionalLight();			_staticLightPicker = new StaticLightPicker([_directionalLight]);			_view3D.scene.addChild(_directionalLight);						_modelMaterial = new ColorMaterial(0xFFFFFF);			_modelMaterial.shadowMethod = new FilteredShadowMapMethod(_directionalLight);			_modelMaterial.lightPicker = _staticLightPicker;			_modelMaterial.specular = 0;						_loader=new Loader3D();			_loader.scale(.2);			//_loader.y = -400;			_loader.addEventListener(AssetEvent.ASSET_COMPLETE, onModelParseComplete);			_loader.loadData(new TestModel());								}		//*****Core Functionality				public function render():void{			if(_lc.active && _lc.frame.hands.length>0 && _lc.frame.fingers.length>0){//				_pitch=_lc.frame.hands[0].direction.pitch;//				_roll=_lc.frame.hands[0].palmNormal.roll;//				_yaw=_lc.frame.hands[0].direction.yaw;//							}			//			if(_lc.gestures.length>0 && (_lc.gestures[0].type==Gesture.TYPE_SWIPE)){//				//				_loader.rotationY+=90;//			}						if(_lc.swipeLeft){				_loader.rotationY-=90;				debug("swipeLeft");				debug("_laoder.rotationY=="+_loader.rotationY);			} else {				//debug("!swipeLeft");			}						if(_lc.swipeRight){				_loader.rotationY+=90;				debug("swipeRight");				debug("_laoder.rotationY=="+_loader.rotationY);			} else {				//debug("!swipeRight");			}						//debug("_laoder.rotationY=="+_loader.rotationY);			//_floor.rotationY+=1;			_view3D.render();						//debug("***** render()");		}		//*****Event Handlers				private function onModelParseComplete(e:AssetEvent):void{			debug("onModelParseComplete()");			_view3D.scene.addChild(_loader);			_loader.rotationX=90;			_loader.pivotPoint=new Vector3D();						_view3D.camera.lookAt(_loader.position);						// Clean up listener			_loader.removeEventListener(AssetEvent.ASSET_COMPLETE, onModelParseComplete);						// process our mesh via the asset event			switch (String(e.asset.assetType))			{				case "mesh":					// Assign mesh					_modelMesh = e.asset as Mesh;										// Loop through mesh assigning materials to the sub meshes					for each (var m:SubMesh in _modelMesh.subMeshes){					m.material = _modelMaterial;				}					break;												case "material":					var textureMaterial:TextureMaterial = e.asset as TextureMaterial;					textureMaterial.lightPicker = _staticLightPicker;					break;								case "geometry":					debug("geometry");					break;												default:					trace("UNHANDLED ASSET TYPE: " + e.asset.assetType);						break;						}					}				private function onAway3DWorld(e:MuleEvent):void{			/*debug("onAway3DWorld()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){												default:					debug("onAway3DWorld()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public static function get instance():Away3DWorld{return _instance;}		//*****Utility Functions				//**debug		private function debug(str:String):void{			utils.debug(NAME,str);		}				}//end class}//end packageclass Away3DWorldLock{}