// com.adam.media.CamDetector// Adam Riggs//package com.adam.media {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.events.*;	import flash.media.Camera;	import flash.media.Microphone;	import flash.system.Capabilities;		public class CamDetector{				//vars		private var _os:String;		private var _camIndex:int;		private var _micIndex:int;		private var _micActive:Boolean;		private var _camActive:Boolean;		private var _micStatusArray:Array;		private var _camStatusArray:Array;		private var _camW:int;		private var _camH:int;		private var _camFPS:Number;				//objects		private var appData:AppData=AppData.instance;		private var _cam:Camera;		private var _mic:Microphone;				//const		public const NAME:String="camDetector";		public const VIEW:String="camView";		public const CONTROLLER:String="camController";		public const MODEL:String="camModel";				/** Storage for the singleton instance. */		private static const _instance:CamDetector = new CamDetector(CamDetectorLock);				public function CamDetector(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != CamDetectorLock)			{				throw new Error("Invalid CamDetector access.  Use CamDetector.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();			detectCamMic();		}				private function initVars():void{			if (Capabilities.os.indexOf("MacOS",0) != -1 || Capabilities.os.indexOf("Mac OS",0) != -1){			  _os = "MAC";			}			else if (Capabilities.os.indexOf("Linux",0) != -1){			  _os = "LINUX";			}			else{			  _os = "WINDOWS";			}			debug("Capabilities.os=="+Capabilities.os);			debug("_os=="+_os);						_camIndex=0;			_micIndex=0;						_micActive=false;			_camActive=false;						_micStatusArray=new Array();			_camStatusArray=new Array();						_camW=320;			_camH=480;			_camFPS=30;		}				private function initEvents():void{			appData.eventManager.listen(NAME, onCamDetector);		}				private function initObjs():void{					}		//*****Core Functionality				//*****Camera functions		private function guessCamIndex():void{			debug("guessCamIndex()");			if(Camera.names.length>0){				// Find a camera and hook it up to the video object				if(_os=="MAC"){					_camIndex=Camera.names.length-1;				}				else{					_camIndex=-1;				}			}						for(var i:uint=0,j:uint=Camera.names.length;i<j;i++){				debug("Camera.names["+i+"]=="+Camera.names[i]);			}		}				private function getCam():void{			debug("getCam()");			if(_camIndex==-1){				_cam=Camera.getCamera();			}			else{				_cam=Camera.getCamera(_camIndex.toString());			}						// listen for camera status messages			_cam.addEventListener(StatusEvent.STATUS, onCamStatus, false, 0, true);			_cam.addEventListener(ActivityEvent.ACTIVITY, onCamActivity, false, 0, true);		}				private function setCamMode():void{			_cam.setMode(_camW,_camH,_camFPS);					}				//*****Microphone functions		private function guessMicIndex():void{			debug("guessMicIndex()");			_micIndex=-1;		}				private function getMic():void{			debug("getMic()");			if(_micIndex==-1){				_mic=Microphone.getMicrophone();			} else {				_mic=Microphone.getMicrophone(_micIndex);			}			_mic.addEventListener(StatusEvent.STATUS, onMicStatus, false, 0, true);			_mic.addEventListener(ActivityEvent.ACTIVITY, onMicActivity, false, 0, true);		}				//*****public functions 		public function detectMic():void{			debug("detectMic()");			guessMicIndex();			getMic();		}				public function detectCam():void{			debug("detectCam()");			guessCamIndex();			getCam();		}				public function detectCamMic():void{			debug("detectCamMic()");			detectCam();			detectMic();		}		//*****Event Handlers				private function onMicStatus(e:StatusEvent):void{			debug("onMicStatus() e.code=="+e.code);			_micStatusArray.push(e.code);		}				private function onMicActivity(e:ActivityEvent):void{			debug("onMicActivity() e.activating=="+e.activating);			_micActive=true;		}				private function onCamStatus(e:StatusEvent):void{			debug("onCamStatus() e.code=="+e.code);			_camStatusArray.push(e.code);						appData.eventManager.dispatch(VIEW, {type:"camStatus", sender:NAME, code:e.code});		}				private function onCamActivity(e:ActivityEvent):void{			debug("onCamActivity() e.activating=="+e.activating);			_camActive=true;		}				private function onCamDetector(e:MuleEvent):void{			/*debug("onCamDetector()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								default:					debug("onCamDetector()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public static function get instance():CamDetector{return _instance;}				public function get micActive():Boolean{return _micActive;}		public function get camActive():Boolean{return _camActive;}		public function get os():String{return _os;}		public function get micStatusArray():Array{return _micStatusArray;}		public function get camStatusArray():Array{return _camStatusArray;}		public function get camIndex():int{return _camIndex;}		public function get micIndex():int{return _micIndex;}		public function get camW():int{return _camW;}		public function get camH():int{return _camH;}		public function get camFPS():Number{return _camFPS;}				public function set camW(value:int):void{_camW=value;setCamMode();}		public function set camH(value:int):void{_camH=value;setCamMode();}		public function set camFPS(value:Number):void{_camFPS=value;setCamMode();}				public function get camera():Camera{			if(_cam==null){detectCam();}			return _cam;		}		public function get microphone():Microphone{			if(_mic==null){detectMic();}			return _mic;		}		//*****Utility Functions				//**debug		private function debug(str:String):void{			//trace(NAME+": "+str);			appData.debug(NAME,str);		}				}//end class}//end packageclass CamDetectorLock{}