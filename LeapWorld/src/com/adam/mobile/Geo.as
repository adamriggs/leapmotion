// com.adam.mobile.Geolocation// Adam Riggs//package com.adam.mobile {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.events.*;	import flash.events.GeolocationEvent;	import flash.sensors.Geolocation;		public class Geo{				//vars		private var _latitude:Number;		private var _longitude:Number;		private var _altitude:Number;		private var _heading:Number;		private var _horizontalAccuracy:Number;		private var _speed:Number;		private var _timestamp:Number;		private var _verticalAccuracy:Number;		private var _isSupported:Boolean;				//objects		private var appData:AppData=AppData.instance;		private var geolocation:Geolocation;						//const		public const NAME:String="geo";				/** Storage for the singleton instance. */		private static const _instance:Geo = new Geo(GeoLock);				public const RADIUS_OF_EARTH_IN_MILES:int = 3963;		public const RADIUS_OF_EARTH_IN_FEET:int =20925525;		public const RADIUS_OF_EARTH_IN_KM:int =6378;		public const RADIUS_OF_EARTH_IN_M:int =6378000;				public function Geo(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != GeoLock)			{				throw new Error("Invalid Geo access.  Use Geo.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{					}				private function initEvents():void{			appData.eventManager.listen(NAME, onGeo);		}				private function initObjs():void{			if(Geolocation.isSupported){				geolocation=new Geolocation();				geolocation.addEventListener(GeolocationEvent.UPDATE, onUpdate);				_isSupported=true;			} else {				debug("***** Geolocation is not supported");				_isSupported=false;			}		}		//*****Core Functionality				public function distanceBetweenTwoPoints(lat1:Number,lon1:Number,lat2:Number,lon2:Number,units:String="miles"):Number{						return calcDistance(lat1,lon1,lat2,lon2);		}				public function distanceToPoint(lat:Number,lon:Number,units:String="miles"):Number{						return calcDistance(_latitude,_longitude,lat,lon);		}				private function calcDistance(lat1:Number,lon1:Number,lat2:Number,lon2:Number,units:String="miles"):Number{							var R:int = RADIUS_OF_EARTH_IN_MILES;			if (units == "km"){				R = RADIUS_OF_EARTH_IN_KM;			}			if (units == "meters"){				R = RADIUS_OF_EARTH_IN_M;			}			if (units =="feet"){				R= RADIUS_OF_EARTH_IN_FEET;			}						var dLat:Number = (lat2-lat1) * Math.PI/180;			var dLon:Number = (lon2-lon1) * Math.PI/180;						var lat1inRadians:Number = lat1 * Math.PI/180;			var lat2inRadians:Number = lat2 * Math.PI/180;						var a:Number = Math.sin(dLat/2) * Math.sin(dLat/2) + 				Math.sin(dLon/2) * Math.sin(dLon/2) * 				Math.cos(lat1inRadians) * Math.cos(lat2inRadians);			var c:Number = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 			var d:Number = R * c;						return d;					}		//*****Event Handlers				private function onUpdate(e:GeolocationEvent):void{			_latitude=e.latitude;			_longitude=e.longitude;			_altitude=e.altitude;			_heading=e.heading;			_horizontalAccuracy=e.horizontalAccuracy;			_speed=e.speed;			_timestamp=e.timestamp;			_verticalAccuracy=e.verticalAccuracy;			//			debug("latitude=="+latitude);//			debug("longitude=="+longitude);//			debug("altitude=="+altitude);//			debug("heading=="+heading);//			debug("horizontalAccuracy=="+horizontalAccuracy);//			debug("speed=="+speed);//			debug("timestamp=="+timestamp);//			debug("verticalAccuracy=="+verticalAccuracy);//			debug("*****");		}				private function onGeo(e:MuleEvent):void{			/*debug("onGeo()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){												default:					debug("onGeo()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);					break;			}		}				//*****Gets and Sets				public static function get instance():Geo{return _instance;}				public function get latitude():Number{return _latitude;}		public function get longitude():Number{return _longitude;}		public function get altitude():Number{return _altitude;}		public function get heading():Number{return _heading;}		public function get horizontalAccuracy():Number{return _horizontalAccuracy;}		public function get speed():Number{return _speed;}		public function get timestamp():Number{return _timestamp;}		public function get verticalAccuracy():Number{return _verticalAccuracy;}		public function get isSupported():Boolean{return _isSupported;}		//*****Utility Functions				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end packageclass GeoLock{}