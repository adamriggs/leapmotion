// com.adam.utils.Away3DWorld// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.Utils;	import com.app.controller.LeapController;	//import com.leapmotion.leap.util.LeapMath;		import flash.display.Bitmap;	import flash.display.Sprite;	import flash.geom.Vector3D;		import away3d.containers.View3D;	//import away3d.debug.Trident;	import away3d.entities.Mesh;	import away3d.materials.ColorMaterial;	import away3d.materials.TextureMaterial;
		public class Away3DWorld extends Sprite{						//vars		protected var _pitch:Number;		protected var _roll:Number;		protected var _yaw:Number;				protected var _floorImg:Bitmap;				//objects		private var utils:Utils=Utils.instance;		protected var _lc:LeapController;		protected var _view3D:View3D;		protected var _floor:Mesh;		protected var _floorMaterial:ColorMaterial;		protected var _floorTexture:TextureMaterial;		protected var _sphere:Mesh;		protected var _trident:Mesh;		protected var _bubble:Bubble;		protected var _lv:LeapVisualizer;						//const		public const NAME:String="away3DWorld";		public const RETURNTYPE:String=NAME;				/** Storage for the singleton instance. */		private static const _instance:Away3DWorld = new Away3DWorld(Away3DWorldLock);				public function Away3DWorld(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != Away3DWorldLock)			{				throw new Error("Invalid Away3DWorld access.  Use Away3DWorld.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();			initScene();		}				private function initVars():void{								}				private function initEvents():void{			utils.em.listen(NAME, onAway3DWorld);		}				private function initObjs():void{			_lc=LeapController.instance;			_lv=LeapVisualizer.instance;			_bubble=new Bubble();		}				private function initScene():void{			_view3D=new View3D();			addChild(_view3D);						_view3D.camera.z=-600;			_view3D.camera.y=500;			_view3D.camera.lookAt(new Vector3D);									_view3D.scene.addChild(_bubble.bubble);			_view3D.scene.addChild(_lv.tip);		}		//*****Core Functionality				public function render():void{			if(_lc.frame.fingers.length>0){				collision(_bubble.bubble);//				debug("_lc.frame.fingers[0].tipPosition.x=="+_lc.frame.fingers[0].tipPosition.x);//				debug("_bubble.bubble.maxX=="+_bubble.bubble.maxX);//				debug("_bubble.bubble.minX=="+_bubble.bubble.minX);//				debug("_bubble.bubble.x=="+_bubble.bubble.x);			}						//_floor.rotationY+=1;			_lv.render();			_view3D.render();		}				private function collision(mesh:Mesh):void{			if(_lc.frame.fingers[0].tipPosition.x>mesh.minX &&				_lc.frame.fingers[0].tipPosition.x<mesh.maxX &&				_lc.frame.fingers[0].tipPosition.y>mesh.minY &&				_lc.frame.fingers[0].tipPosition.y<mesh.maxY &&				_lc.frame.fingers[0].tipPosition.z>mesh.minY &&				_lc.frame.fingers[0].tipPosition.z<mesh.maxZ				){				debug("*****hit");			}		}		//*****Event Handlers				private function onAway3DWorld(e:MuleEvent):void{			/*debug("onAway3DWorld()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){												default:					debug("onAway3DWorld()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public static function get instance():Away3DWorld{return _instance;}		//*****Utility Functions				//**debug		private function debug(str:String):void{			utils.debug(NAME,str);		}				}//end class}//end packageclass Away3DWorldLock{}