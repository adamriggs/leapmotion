// com.adam.utils.LeapVisualizer// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.Utils;	import com.app.controller.LeapController;		import away3d.entities.Mesh;	import away3d.primitives.SphereGeometry;
		public class LeapVisualizer{				//vars				//objects		private var utils:Utils=Utils.instance;		protected var _sphere:Mesh;		protected var _lc:LeapController;				//const		public const NAME:String="leapVisualizer";		public const RETURNTYPE:String=NAME;				/** Storage for the singleton instance. */		private static const _instance:LeapVisualizer = new LeapVisualizer(LeapVisualizerLock);				public function LeapVisualizer(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != LeapVisualizerLock)			{				throw new Error("Invalid LeapVisualizer access.  Use LeapVisualizer.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{					}				private function initEvents():void{			utils.em.listen(NAME, onLeapVisualizer);		}				private function initObjs():void{			_lc=LeapController.instance;			_sphere=new Mesh(new SphereGeometry(25));		}		//*****Core Functionality				public function render():void{			if(_lc.fingers.length>0){				_sphere.x=_lc.fingers[0].tipPosition.x;				_sphere.y=_lc.fingers[0].tipPosition.y;				_sphere.z=_lc.fingers[0].tipPosition.z;			}		}		//*****Event Handlers				private function onLeapVisualizer(e:MuleEvent):void{			/*debug("onLeapVisualizer()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){												default:					debug("onLeapVisualizer()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public static function get instance():LeapVisualizer{return _instance;}				public function get tip():Mesh{return _sphere;}		//*****Utility Functions				//**debug		private function debug(str:String):void{			utils.debug(NAME,str);		}				}//end class}//end packageclass LeapVisualizerLock{}