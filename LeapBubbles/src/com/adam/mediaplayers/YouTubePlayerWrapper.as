// com.adam.mediaplayers.YouTubePlayerWrapper// Adam Riggs//package com.adam.mediaplayers {	import com.adam.events.MuleEvent;	import com.adam.utils.AppData;		import flash.display.Loader;	import flash.display.Sprite;	import flash.events.*;	import flash.net.URLRequest;	import flash.system.Security;
		public class YouTubePlayerWrapper extends Sprite {				//vars		private var _urlStart:String;		private var _urlFinish:String;				//objects		private var appData:AppData=AppData.instance;		private var _ytLoader:Loader;		private var _ytPlayer:Object;				//const		public const NAME:String="youTubePlayerWrapper";		public const RETURNTYPE:String=NAME;				public function YouTubePlayerWrapper(){						init();		}		//*****Initialization Routines				public function init():void{			debug("init()");						Security.allowDomain("www.youtube.com");						initVars();			initEvents();			initObjs();		}				private function initVars():void{			_urlStart="http://www.youtube.com/v/";			_urlFinish="?version=3";		}				private function initEvents():void{			appData.eventManager.listen(NAME, onYouTubePlayerWrapper);		}				private function initObjs():void{			_ytLoader=new Loader();			_ytLoader.contentLoaderInfo.addEventListener(Event.INIT, onYTInit);			_ytLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, onYTComplete);			addChild(_ytLoader);		}		//*****Core Functionality				public function loadVideo(id:String):void{			debug("loadVideo - id=="+id);			_ytLoader.load(new URLRequest(_urlStart+id+_urlFinish));		}				public function destroy():void{			_ytPlayer.destroy();		}				public function setSize(width:int,height:int):void{			_ytPlayer.setSize(width,height);		}		//*****Event Handlers				private function onYTInit(e:Event):void{			_ytPlayer=_ytLoader.content;			_ytPlayer.addEventListener("onReady", onReady);			_ytPlayer.addEventListener("onStateChange", onStateChange);			_ytPlayer.addEventListener("onPlaybackQualityChange", onPlaybackQualityChange);			_ytPlayer.addEventListener("onPlaybackRateChange", onPlaybackRateChange);			_ytPlayer.addEventListener("onError", onError);			_ytPlayer.addEventListener("onApiChange", onApiChange);		}						private function onReady(e:Event):void{			debug("onPlayerReady()");			setSize(320,240);		}				private function onStateChange(e:Event):void{			debug("onPlayerStateChange()");			var state:int=Object(e).data;			debug("\tstate - "+Object(e).data);						switch(state){								case -1:					debug("\tunstarted");										break;								case 0:					debug("\tended");										break;								case 1:					debug("\tplaying");										break;								case 2:					debug("\tpaused");										break;								case 3:					debug("\tbuffering");										break;								case 4:					debug("\t*****4 isn't used - wierd");					break;								case 5:					debug("\tvideo cued");										break;							}		}				private function onPlaybackQualityChange(e:Event):void{			debug("onPlaybackQualityChange()");			var quality:String=Object(e).data;			debug("\tquality - "+quality);						switch(quality){								case "small":										break;								case "medium":										break;								case "large":										break;								case "hd720":										break;								case "hd1080":										break;								case "highres":										break;							}		}				private function onPlaybackRateChange(e:Event):void{			debug("onPlaybackRateChange()");			var rate:String=Object(e).data;			debug("\trate - "+rate);		}				private function onError(e:Event):void{			debug("onError()");						var err:int=Object(e).data;			debug("\terror - "+err);						switch(err){								case 2:					debug("\tThe request contains an invalid parameter value.");										break;								case 100:					debug("\tThe video requested was not found.");										break;								case 101:					debug("\tThe owner of the video does not allow it to be played in embedded players.");										break;								case 150:					debug("\tThe owner of the video does not allow it to be played in embedded players.");										break;			}		}				private function onApiChange(e:Event):void{			debug("onApiChange()");			appData.listObject(_ytPlayer.getOptions());		}				private function onYTComplete(e:Event):void{			debug("onYTComplete()");		}				private function onYouTubePlayerWrapper(e:MuleEvent):void{			/*debug("onYouTubePlayerWrapper()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){																default:					debug("onYouTubePlayerWrapper()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets						//*****Utility Functions				//**visibility		public function show():void{			this.visible = true;		}				public function hide():void{			this.visible = false;		}				//**debug		private function debug(str:String):void{			appData.debug(NAME,str);		}				}//end class}//end package