// com.adam.utils.PickupManager// Adam Riggs//package com.app.controller {	import com.adam.events.MuleEvent;	import com.adam.utils.Utils;	import com.app.model.Model;	import com.app.view.pickups.Pickup;	import com.app.view.pickups.RedJewel;		import flash.display.Stage;	import flash.events.*;
		public class PickupManager{				//vars		protected var _level:uint;		protected var _lives:uint;				//objects		private var utils:Utils=Utils.instance;		protected var model:Model=Model.instance;		protected var am:AsteroidManager=AsteroidManager.instance;		protected var _stage:Stage;		protected var _redJewel:RedJewel;		protected var _pickups:Vector.<Pickup>;				//const		public const NAME:String="pickupManager";		public const RETURNTYPE:String=NAME;				/** Storage for the singleton instance. */		private static const _instance:PickupManager = new PickupManager(PickupManagerLock);				public function PickupManager(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != PickupManagerLock)			{				throw new Error("Invalid PickupManager access.  Use PickupManager.instance instead.");			} else {				init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();		}				private function initVars():void{					}				private function initEvents():void{			utils.em.listen(NAME, onPickupManager);		}				private function initObjs():void{			_pickups=new Vector.<Pickup>();		}		//*****Core Functionality				protected function setLevel(lvl:uint):void{			_level=lvl;			if(_level==1){				var large:uint;				for(var i:uint=0;i<am.asteroids.length;i++){					if(am.asteroids[i].size==AsteroidManager.LARGE){						large=i;						//debug("large=="+large);					}				}				debug("large=="+large);				//debug("am.asteroids.length=="+am.asteroids.length);				am.asteroids[large].pickup="redJewel";			}		}				protected function setLives(lvs:uint):void{			_lives=lvs;		}				protected function setRedJewel(x:Number,y:Number):void{			_redJewel=new RedJewel();			_stage.addChildAt(_redJewel,0);			_redJewel.x=x			_redJewel.y=y;			_pickups.push(_redJewel);		}				public function dropPickup(x:Number,y:Number,type:String):void{			debug("dropPickup");			switch(type){								case "redJewel":					setRedJewel(x,y);					break;							}		}		//*****Event Handlers				private function onPickupManager(e:MuleEvent):void{			/*debug("onPickupManager()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case "dropPickup":					dropPickup(e.data.x,e.data.y,e.data.pickup);					break;								default:					debug("onPickupManager()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public static function get instance():PickupManager{return _instance;}				public function get pickups():Vector.<Pickup>{return _pickups;}				public function set stage(value:Stage):void{_stage=value;}		public function set lives(value:uint):void{setLives(value);}		public function set level(value:uint):void{setLevel(value);}		//*****Utility Functions				//**debug		private function debug(str:String):void{			utils.debug(NAME,str);		}				}//end class}//end packageclass PickupManagerLock{}