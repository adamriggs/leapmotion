// com.app.model.Model// Adam Riggs//package com.app.model {	import com.adam.events.MuleEvent;	import com.adam.utils.Utils;		import flash.display.Sprite;	import flash.display.Stage;	import flash.net.URLVariables;	import flash.xml.*;
		public class Model {				private var utils:Utils=Utils.instance;				//vars		protected var _stageWidth:uint;		protected var _stageHeight:uint;				//asteroid variables		protected var _asteroidAngle:Number;		protected var _asteroidVelocity:Number;		protected var _asteroidCount:uint;		protected var _asteroidBeltWidth:uint;		protected var _asteroidSpawnCount:uint;		protected var _asteroidSmallFactor:Number;		protected var _asteroidMediumFactor:Number;		protected var _asteroidSmallPoints:uint;		protected var _asteroidMediumPoints:uint;		protected var _asteroidLargePoints:uint;				protected var _startingLives:uint;		protected var _currentLives:uint;		protected var _respawnDelay:Number;				protected var _invincibleTime:Number;				//objects		protected var _stage:Stage;				//const		public const NAME:String="model";		public const RETURNTYPE:String=NAME;				/** Storage for the singleton instance. */		private static const _instance:Model = new Model(ModelLock);				public function Model(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != ModelLock)			{				throw new Error("Invalid Model access.  Use Model.instance instead.");			} else {				//init();			}		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();					}				private function initVars():void{			_asteroidAngle=5;			_asteroidVelocity=5;			_asteroidCount=10;			_asteroidSpawnCount=3;			_asteroidSmallFactor=1.2;			_asteroidMediumFactor=1.1;			_asteroidSmallPoints=500;			_asteroidMediumPoints=250;			_asteroidLargePoints=100;						_startingLives=3;			_currentLives=_startingLives;			_respawnDelay=.5;						_invincibleTime=4;		}				private function initEvents():void{			utils.em.listen(NAME, onModel);		}				private function initObjs():void{					}		//*****Core Functionality				protected function setStage(stage:Stage):void{			_stage=stage;			_stageWidth=_stage.stageWidth;			_stageHeight=_stage.stageHeight;			_asteroidBeltWidth=_stageWidth/4;		}				//*****Event Handlers				private function onModel(e:MuleEvent):void{			/*debug("onModel()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								default:					debug("onModel()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);					break;							}		}		//*****Gets and Sets				public static function get instance():Model{return _instance;}				public function get stageWidth():uint{return _stageWidth;}		public function get stageHeight():uint{return _stageHeight;}				public function get invincibleTime():Number{return _invincibleTime;}				public function get asteroidAngle():Number{return _asteroidAngle;}		public function get asteroidVelocity():Number{return _asteroidVelocity;}		public function get asteroidCount():Number{return _asteroidCount;}		public function get asteroidBeltWidth():uint{return _asteroidBeltWidth;}		public function get asteroidSpawncount():uint{return _asteroidSpawnCount;}		public function get asteroidSmallFactor():Number{return _asteroidSmallFactor;}		public function get asteroidMediumFactor():Number{return _asteroidMediumFactor;}		public function get asteroidSmallPoints():uint{return _asteroidSmallPoints;}		public function get asteroidMediumPoints():uint{return _asteroidMediumPoints;}		public function get asteroidLargePoints():uint{return _asteroidLargePoints;}				public function get startingLives():uint{return _startingLives;}		public function get currentLives():uint{return _currentLives;}		public function get respawnDelay():Number{return _respawnDelay;}		public function set currentLives(value:uint):void{_currentLives=value;}				public function set stage(value:Stage):void{setStage(value);}		//*****Utility Functions						//**debug		private function debug(str:String):void{			utils.debug(NAME,str);		}				}//end class}//end packageclass ModelLock{} 