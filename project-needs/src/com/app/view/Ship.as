// com.adam.utils.Ship// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.Utils;	import com.app.lib.SpaceshipMC;	import com.app.model.Model;	import com.greensock.TweenLite;		import flash.display.Sprite;	import flash.events.*;		public class Ship extends Sprite {				//vars		protected var _rotationSpeed:Number;		protected var _speedX:Number;		protected var _speedY:Number;		protected var _speedZ:Number;		protected var _velocity:Number;		protected var _angle:Number;		protected var _acceleration:Number;		protected var _friction:Number;		protected var _maxVelocity:Number;		protected var _active:Boolean;		protected var _invincible:Boolean;				//objects		private var utils:Utils=Utils.instance;		protected var model:Model=Model.instance;		protected var spaceship:SpaceshipMC;				//const		public const NAME:String="ship";		public const RETURNTYPE:String=NAME;				public function Ship(){						init();		}		//*****Initialization Routines				public function init():void{			debug("init()");						initVars();			initEvents();			initObjs();			activate();		}				private function initVars():void{			_rotationSpeed=5;			_acceleration=2;			_maxVelocity=15;			_friction=.1;						_velocity=0;			_angle=0;			_speedX=0;			_speedY=0;			_speedZ=0;						_active=true;			_invincible=false;		}				private function initEvents():void{			utils.em.listen(NAME, onShip);		}				private function initObjs():void{			spaceship=new SpaceshipMC();			addChild(spaceship);						spaceship.spaceshipLargeMC.visible=true;			spaceship.spaceshipSmallMC.visible=false;		}		//*****Core Functionality				protected function calcSpeed():void{			_speedY=-_velocity*Math.cos(utils.degToRad(_angle));			_speedX=_velocity*Math.sin(utils.degToRad(_angle));		}				protected function getAngle():void{			_angle=rotation;			if(_angle>=360){_angle-=360;}			if(_angle<-360){_angle+=360;}		}				protected function indesctructable():void{			alpha=.5;			_invincible=true;		}				protected function desctructable():void{			alpha=1;			_invincible=false;		}				protected function activate():void{			_active=true;			visible=true;			x=(model.stageWidth)/2;			y=(model.stageHeight)/2;			_speedX=0;			_speedY=0;			_velocity=0;			_angle=0;			rotation=0;			indesctructable();			TweenLite.delayedCall(model.invincibleTime, desctructable);		}				protected function deactivate():void{			_active=false;			visible=false;		}				protected function upgradeWeapon():void{					}				public function accelerate():void{			//debug("accelerate()");			//debug("_angle=="+_angle);			getAngle();			_velocity+=_acceleration;			if(_velocity>_maxVelocity){_velocity=_maxVelocity;}			calcSpeed();		}				public function friction():void{			_velocity-=_friction;			if(_velocity<0){_velocity=0;}			calcSpeed();		}				public function teleport():void{			x=Math.ceil(Math.random()*model.stageWidth);			y=Math.ceil(Math.random()*model.stageHeight);		}				public function fire():void{			if(_active){				utils.em.dispatch("shotManager",{type:"shootStart", x:x,y:(y),rot:rotation});			}		}				public function unfire():void{			if(_active){				utils.em.dispatch("shotManager",{type:"shootStop", x:x,y:(y),rot:rotation});			}		}				public function gotHit():void{			//debug("gotHit()");			deactivate();		}				public function respawn():void{			TweenLite.delayedCall(model.respawnDelay, activate);		}		//*****Event Handlers				private function onShip(e:MuleEvent):void{			/*debug("onShip()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case "upgradeWeapon":					upgradeWeapon();					break;								default:					debug("onShip()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public function get rotationSpeed():Number{return _rotationSpeed;}				public function get speedX():Number{return _speedX;}		public function get speedY():Number{return _speedY;}		public function get speedZ():Number{return _speedZ;}				public function get active():Boolean{return _active;}		public function get invincible():Boolean{return _invincible;}		//*****Utility Functions				//**visibility		public function show():void{			this.visible = true;		}				public function hide():void{			this.visible = false;		}				//**debug		private function debug(str:String):void{			utils.debug(NAME,str);		}				}//end class}//end package