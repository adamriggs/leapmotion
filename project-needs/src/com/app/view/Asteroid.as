// com.adam.utils.Asteroid// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.Utils;	import com.app.controller.AsteroidManager;	import com.app.lib.AsteroidLargeMC;	import com.app.lib.AsteroidMediumMC;	import com.app.lib.AsteroidSmallMC;	import com.app.model.Model;	import com.greensock.TweenLite;		import flash.display.Sprite;	import flash.events.*;
		public class Asteroid extends Sprite {				//vars		protected var _angle:Number;		protected var _velocity:Number;		protected var _speedX:Number;		protected var _speedY:Number;		protected var _active:Boolean;		protected var _size:String;		protected var _points:uint;		protected var _pickup:String;				//objects		private var utils:Utils=Utils.instance;		protected var model:Model=Model.instance;		protected var am:AsteroidManager;		private var _asteroidMediumMC:AsteroidMediumMC;		private var _asteroidLargeMC:AsteroidLargeMC;		private var _asteroidSmallMC:AsteroidSmallMC;				//const		public const NAME:String="asteroid";		public const RETURNTYPE:String=NAME;				public function Asteroid(){						init();		}		//*****Initialization Routines				public function init():void{			//debug("init()");						initVars();			initEvents();			initObjs();			activate();		}				private function initVars():void{			_pickup="";		}				private function initEvents():void{			utils.em.listen(NAME, onAsteroid);		}				private function initObjs():void{			am=AsteroidManager.instance			_asteroidMediumMC=new AsteroidMediumMC();			_asteroidLargeMC=new AsteroidLargeMC();			_asteroidSmallMC=new AsteroidSmallMC();					}		//*****Core Functionality				protected function setAngle(angle:Number):void{			_angle=Math.random()*angle;		}				protected function setVelocity(velocity:Number):void{			_velocity=Math.random()*velocity+(velocity/4);			if(Math.random()>.5){				_velocity*=-1;			}		}				public function activate():void{			_active=true;			visible=true;		}				protected function deactivate():void{			_active=false;			visible=false;		}				public function setSize(size:String):void{						_size=size;						switch(size){								case AsteroidManager.SMALL:					_velocity*=model.asteroidSmallFactor;					_angle*=model.asteroidSmallFactor;					if(!_asteroidSmallMC.stage){						addChild(_asteroidSmallMC);					}										if(_asteroidMediumMC.stage){						removeChild(_asteroidMediumMC);					}										if(_asteroidLargeMC.stage){						removeChild(_asteroidLargeMC);					}					_points=model.asteroidSmallPoints;					break;								case AsteroidManager.MEDIUM:					_velocity*=model.asteroidMediumFactor;					_angle*=model.asteroidMediumFactor;					if(!_asteroidMediumMC.stage){						addChild(_asteroidMediumMC);					}										if(_asteroidLargeMC.stage){						removeChild(_asteroidLargeMC);					}										if(_asteroidSmallMC.stage){						removeChild(_asteroidSmallMC);					}					_points=model.asteroidMediumPoints;										break;								case AsteroidManager.LARGE:					if(!_asteroidLargeMC.stage){						addChild(_asteroidLargeMC);					}										if(_asteroidMediumMC.stage){						removeChild(_asteroidMediumMC);					}										if(_asteroidSmallMC.stage){						removeChild(_asteroidSmallMC);					}					_points=model.asteroidLargePoints;										break;							}						calcSpeed();		}				public function calcSpeed():void{			_speedY=-_velocity*Math.cos(utils.degToRad(_angle));			_speedX=_velocity*Math.sin(utils.degToRad(_angle));		}				public function move():void{			x+=_speedX;			y+=_speedY;						if(x<-(width/2)){				x=model.stageWidth+(width/2);			}						if(x>model.stageWidth+(width/2)){				x=-(width/2);			}						if(y<-(height/2)){				y=model.stageHeight+(height/2);			}						if(y>model.stageHeight+(height/2)){				y=-(height/2);			}		}				public function gotShot():void{			deactivate();			if(_pickup!=""){				//debug("_pickup=="+_pickup);				utils.em.dispatch("pickupManager", {type:"dropPickup", sender:NAME, x:x, y:y, pickup:_pickup});				_pickup="";			}			am.spawn(x,y,_size);		}		//*****Event Handlers				private function onAsteroid(e:MuleEvent):void{			/*debug("onAsteroid()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){																default:					debug("onAsteroid()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);				break;							}		}				//*****Gets and Sets				public function set angle(value:Number):void{setAngle(value);}		public function set velocity(value:Number):void{setVelocity(value);}		public function set pickup(value:String):void{_pickup=value;}				public function get speedX():Number{return _speedX;}		public function get speedY():Number{return _speedY;}		public function get active():Boolean{return _active;}		public function get points():uint{return _points;}		public function get size():String{return _size;}		//*****Utility Functions				//**visibility		public function show():void{			this.visible = true;		}				public function hide():void{			this.visible = false;		}				//**debug		private function debug(str:String):void{			utils.debug(NAME,str);		}				}//end class}//end package