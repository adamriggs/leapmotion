// com.app.view.View// Adam Riggs//package com.app.view {	import com.adam.events.MuleEvent;	import com.adam.utils.Utils;	import com.app.controller.KeyboardController;	import com.app.controller.PickupManager;	import com.app.view.PauseScreen;		import flash.display.Sprite;	import flash.events.*;
		public class View extends Sprite{				//vars				//objects		private var utils:Utils=Utils.instance;		protected var kc:KeyboardController;		protected var pm:PickupManager;		protected var _startScreen:StartScreen;		protected var _pauseScreen:PauseScreen;		protected var _gameOverScreen:GameOverScreen;		protected var _game:Game;		protected var _pauseCount:uint;				//const		public const NAME:String="view";		public const RETURNTYPE:String=NAME;				/** Storage for the singleton instance. */		private static const _instance:View = new View(ViewLock);				public function View(lock:Class){			// Verify that the lock is the correct class reference.			if (lock != ViewLock)			{				throw new Error("Invalid View access.  Use View.instance instead.");			} else {				//init();							}		}		//*****Initialization Routines				public function init():void{			debug("init()");						if(stage){								initVars();				initEvents();				initObjs();			} else {				addEventListener(Event.ADDED_TO_STAGE, onAddedToStage, false, 0, true);			}		}				private function initVars():void{					}				private function initEvents():void{			utils.em.listen(NAME, onView);			addEventListener(Event.ENTER_FRAME, onEnterFrame, false, 0, true);		}				private function initObjs():void{			pm=PickupManager.instance;			kc=KeyboardController.instance;						_game=Game.instance;			addChild(_game);						_pauseScreen=PauseScreen.instance;			addChild(_pauseScreen);			_pauseScreen.visible=false;						_gameOverScreen=GameOverScreen.instance;			addChild(_gameOverScreen);			_gameOverScreen.visible=false;						_startScreen=StartScreen.instance;			addChild(_startScreen);			utils.makeButton(_startScreen.startBtn, this);		}		//*****Core Functionality				protected function startGame():void{			_startScreen.visible=false;			_game.gamePaused=false;		}				protected function gameOver():void{			_gameOverScreen.visible=true;		}				protected function pauseGame():void{			_game.gamePaused=true;			_pauseScreen.visible=true;		}				protected function unpauseGame():void{			_game.gamePaused=false;			_pauseScreen.visible=false;		}		//*****Event Handlers				public function onClick(e:MouseEvent):void{			switch(e.currentTarget){								case _startScreen.startBtn:					startGame();					break;							}		}				protected function onEnterFrame(e:Event):void{			if(kc.keyPause){								if(_pauseCount==0){					if(_game.gamePaused){						unpauseGame();					} else {						pauseGame();					}				}								_pauseCount++;							} else {				_pauseCount=0;			}						_game.render();		}				protected function onAddedToStage(e:Event):void{			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			initVars();			initEvents();			initObjs();		}						private function onView(e:MuleEvent):void{			/*debug("onView()");			debug("e.data.sender=="+e.data.sender);			debug("e.data.type=="+e.data.type);*/			switch(e.data.type){								case "gameOver":					gameOver();					break;								default:					debug("onView()");					debug("*type not found");					debug("e.data.sender=="+e.data.sender);					debug("e.data.type=="+e.data.type);					break;							}		}				//*****Gets and Sets				public static function get instance():View{return _instance;}		//*****Utility Functions				//**visibility		public function show():void{			this.visible = true;		}				public function hide():void{			this.visible = false;		}				//**debug		private function debug(str:String):void{			utils.debug(NAME,str);		}				}//end class}//end packageclass ViewLock{}